#ifndef ROBOHOCKEY_LAYER_AUTONOMOUS_ROUTERTEST_H
#define ROBOHOCKEY_LAYER_AUTONOMOUS_ROUTERTEST_H

#include <cppunit/TestFixture.h>
#include <cppunit/extensions/HelperMacros.h>

namespace RoboHockey
{
namespace Layer
{
namespace Autonomous
{
	class RouterTest :
			public CPPUNIT_NS::TestFixture
	{
		CPPUNIT_TEST_SUITE(RouterTest);
		CPPUNIT_TEST(calculateRoute_emptyField_validRoute);
		CPPUNIT_TEST(calculateRoute_emptyField_onlyPointOfRouteIsTarget);
		CPPUNIT_TEST(calculateRoute_emptyField_routeHasSameWidthAsRobot);
		CPPUNIT_TEST(getPointsBesideObstacle_intersectFromLeftAndCircleCenterNotOnPath_shortPointIs2AndMinus1);
		CPPUNIT_TEST(getPointsBesideObstacle_intersectFromLeftAndCircleCenterNotOnPath_longPointIs2AndMinus4p8284);
		CPPUNIT_TEST(getPointsBesideObstacle_intersectFromRightAndCircleCenterNotOnPath_shortPointIs2And3);
		CPPUNIT_TEST(getPointsBesideObstacle_intersectFromLeftAndCircleCenterNotOnPath_shortPointIs1p5And0p5);
		CPPUNIT_TEST(getPointsBesideObstacle_intersectFromRightAndCircleCenterNotOnPath_shortPointIs0p5And1p5);
		CPPUNIT_TEST(getPointsBesideObstacle_intersectFromLeftAndCircleCenterIsOnPath_shortPointIs2AndMinus1);
		CPPUNIT_TEST(getPointsBesideObstacle_intersectFromRightAndCircleCenterIsOnPath_shortPointIs2And3);
		CPPUNIT_TEST(getPointsBesideObstacle_intersectFromLeftAndCircleCenterIsOnPath_shortPointIs1p5And0p5);
		CPPUNIT_TEST(getPointsBesideObstacle_intersectFromRightAndCircleCenterIsOnPath_shortPointIs0p5And1p5);
		CPPUNIT_TEST_SUITE_END();

	private:
		void calculateRoute_emptyField_validRoute();
		void calculateRoute_emptyField_onlyPointOfRouteIsTarget();
		void calculateRoute_emptyField_routeHasSameWidthAsRobot();
		void getPointsBesideObstacle_intersectFromLeftAndCircleCenterNotOnPath_shortPointIs2AndMinus1();
		void getPointsBesideObstacle_intersectFromLeftAndCircleCenterNotOnPath_longPointIs2AndMinus4p8284();
		void getPointsBesideObstacle_intersectFromRightAndCircleCenterNotOnPath_shortPointIs2And3();
		void getPointsBesideObstacle_intersectFromLeftAndCircleCenterNotOnPath_shortPointIs1p5And0p5();
		void getPointsBesideObstacle_intersectFromRightAndCircleCenterNotOnPath_shortPointIs0p5And1p5();
		void getPointsBesideObstacle_intersectFromLeftAndCircleCenterIsOnPath_shortPointIs2AndMinus1();
		void getPointsBesideObstacle_intersectFromRightAndCircleCenterIsOnPath_shortPointIs2And3();
		void getPointsBesideObstacle_intersectFromLeftAndCircleCenterIsOnPath_shortPointIs1p5And0p5();
		void getPointsBesideObstacle_intersectFromRightAndCircleCenterIsOnPath_shortPointIs0p5And1p5();
	};
}
}
}

#endif
